{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This docker image provides a Minecraft Server that will automatically download the latest stable version at startup. You can also run/upgrade to any specific version or the latest snapshot. See the Versions section below for more information.</p> <p>To simply use the latest stable version, run</p> <pre><code>docker run -d -it -p 25565:25565 -e EULA=TRUE itzg/minecraft-server\n</code></pre> <p>where, in this case, the standard server port 25565, will be exposed on your host machine.</p> <p>Note</p> <p>If you plan on running a server for a longer amount of time it is highly recommended using a management layer such as Docker Compose or Kubernetes to allow for incremental reconfiguration and image upgrades.</p> <p>Info</p> <p>Be sure to always include <code>-e EULA=TRUE</code> in your commands and container definitions, as Mojang/Microsoft requires EULA acceptance.</p> <p>Warning</p> <p>DO NOT port forward RCON on 25575 without first setting <code>RCON_PASSWORD</code> to a secure value. It is highly recommended to only use RCON within the container, such as with <code>rcon-cli</code>. </p> <p>By default, the container will download the latest version of the \"vanilla\" Minecraft: Java Edition server provided by Mojang. The <code>VERSION</code> and the <code>TYPE</code> can be configured to create many variations of desired Minecraft server. </p>"},{"location":"java/","title":"Java edition","text":"<p>Visit documentation site for Java edition Minecraft Server on Docker</p>"},{"location":"related-projects/","title":"Related Projects","text":""},{"location":"related-projects/#itzgminecraft-bedrock-server","title":"itzg/minecraft-bedrock-server","text":"<p>Docker image that runs a Minecraft Bedrock server.</p>"},{"location":"related-projects/#mc-router","title":"mc-router","text":"<p>Lightweight multiplexer/proxy for Minecraft Java servers. Provided as a stand-alone application and a Docker image.</p>"},{"location":"related-projects/#itzgbungeecord","title":"itzg/bungeecord","text":"<p>Docker image that runs a proxy powered by Bungeecord, Velocity, or Waterfall</p>"},{"location":"related-projects/#itzgmc-backup","title":"itzg/mc-backup","text":"<p>Docker image that runs as a side-car container to backup world data.</p>"},{"location":"related-projects/#rcon-cli","title":"rcon-cli","text":"<p>A tool that is bundled with this image to provide CLI access to an RCON endpoint.</p>"},{"location":"related-projects/#mc-monitor","title":"mc-monitor","text":"<p>A tool that is bundled with this image that provides health checks and metrics reporting, such as a Prometheus exporter or a telegraf data source.</p>"},{"location":"related-projects/#mc-image-helper","title":"mc-image-helper","text":"<p>A tool that is bundled with this image to provide complex, re-usable preparation operations. </p>"},{"location":"related-projects/#itzgrcon","title":"itzg/rcon","text":"<p>An image that dockerizes rcon-web-admin.</p>"},{"location":"bedrock/","title":"Index","text":"<p>itzg/minecraft-bedrock-server</p> <p>The following starts a Bedrock Dedicated Server running a default version and exposing the default UDP port: </p> <pre><code>docker run -d -it -e EULA=TRUE -p 19132:19132/udp -v mc-bedrock-data:/data itzg/minecraft-bedrock-server\n</code></pre> <p>Note</p> <p>if you plan on running a server for a longer amount of time it is highly recommended using a management layer such as Docker Compose or Kubernetes to allow for incremental reconfiguration and image upgrades.</p>"},{"location":"bedrock/#upgrading-to-the-latest-bedrock-server-version","title":"Upgrading to the latest Bedrock server version","text":"<p>With the <code>VERSION</code> variable set to <code>LATEST</code>, which is the default, then the Bedrock server can be upgraded by restarting the container. At every startup, the container checks for the latest version and upgrades, if needed.</p> <p>The latest preview version can be requested by setting <code>VERSION</code> to <code>PREVIEW</code>.</p>"},{"location":"bedrock/#exposed-ports","title":"Exposed Ports","text":"<ul> <li>UDP 19132 : the Bedrock server port. NOTE that you must append <code>/udp</code> when exposing the port, such as <code>-p 19132:19132/udp</code></li> </ul>"},{"location":"bedrock/#volumes","title":"Volumes","text":"<ul> <li><code>/data</code> : the location where the downloaded server is expanded and ran. Also contains the configuration properties file <code>server.properties</code></li> </ul> <p>You can create a <code>named volume</code> and use it as:</p> <pre><code>docker volume create mc-volume\ndocker run -d -it --name mc-server -e EULA=TRUE -p 19132:19132/udp -v mc-volume:/data itzg/minecraft-bedrock-server\n</code></pre> <p>If you're using a named volume and want the bedrock process to run as a non-root user then you will need to pre-create the volume and <code>chown</code> it to the desired user.</p> <p>For example, if you want the bedrock server to run with user ID 1000 and group ID 1000, then create and chown the volume named \"bedrock\" using:</p> <p><pre><code>docker run --rm -v bedrock:/data alpine chown 1000:1000 /data\n</code></pre> If using <code>docker run</code> then simply reference that volume \"bedrock\" in the <code>-v</code> argument. If using a compose file, declare the volume as an external using this type of declaration:</p> <pre><code>volumes:\nbedrock:\nexternal:\nname: bedrock\n</code></pre>"},{"location":"bedrock/#connecting","title":"Connecting","text":"<p>When running the container on your LAN, you can find and connect to the dedicated server in the \"LAN Games\" part of the \"Friends\" tab, such as:</p> <p></p>"},{"location":"bedrock/#permissions","title":"Permissions","text":"<p>The Bedrock Dedicated Server requires permissions be defined with XUIDs. There are various tools to look these up online and they are also printed to the log when a player joins. There are 3 levels of permissions and 3 options to configure each group</p> <ul> <li><code>OPS</code> is used to define operators on the server.</li> </ul> <pre><code>-e OPS \"1234567890,0987654321\"  </code></pre> <ul> <li><code>MEMBERS</code> is used to define the members on the server.  </li> </ul> <pre><code>-e MEMBERS \"1234567890,0987654321\"\n</code></pre> <ul> <li><code>VISITORS</code> is used to define visitors on the server.  </li> </ul> <pre><code>-e VISITORS \"1234567890,0987654321\"\n</code></pre>"},{"location":"bedrock/#whitelist","title":"Whitelist","text":"<p>There are two ways to handle a whitelist. The first is to set the <code>WHITE_LIST</code> environment variable to true and map in a whitelist.json that is custom-crafted to the container. The other is to use the <code>WHITE_LIST_USERS</code> environment variable to list users that should be whitelisted. This list is player names. The server will look up the names and add in the XUID to match the player.</p> <p>Note</p> <p>Starting with <code>1.16.230.50</code>, <code>ALLOW_LIST</code>, <code>ALLOW_LIST_USERS</code>, and the file <code>allowlist.json</code> will be used instead.</p>"},{"location":"bedrock/#community-solutions","title":"Community Solutions","text":"<ul> <li>kaiede/minecraft-bedrock-backup image by @Kaiede</li> <li>ghcr.io/edward3h/mc-webhook by @edward3h</li> <li>Minecraft Bedrock Server Bridge by @macchie</li> </ul>"},{"location":"bedrock/#tutorials","title":"Tutorials","text":"<p>@TheTinkerDad provides an excellent tutorial on how to host multiple instances on a single port (19132) so that it's discoverable: https://www.youtube.com/watch?v=ds0_ESzjbfs</p>"},{"location":"bedrock/deployment/docker-compose/","title":"Docker Compose","text":"<p>The examples directory contains an example Docker compose file that declares:</p> <ul> <li>a service running the bedrock server container and exposing UDP port 19132</li> <li>a volume to be attached to the service</li> </ul> <p>The service configuration includes some examples of configuring the server properties via environment variables:</p> <pre><code>environment:\nEULA: \"TRUE\"\nGAMEMODE: survival\nDIFFICULTY: normal\n</code></pre> <p>From with in the <code>examples</code> directory, you can deploy the composition by using:</p> <pre><code>docker-compose up -d\n</code></pre> <p>You can follow the logs using: <pre><code>docker-compose logs -f bds\n</code></pre></p>"},{"location":"bedrock/deployment/k8s/","title":"Kubernetes","text":"<p>The examples directory contains an example Kubernetes manifest file that declares:</p> <ul> <li>a peristent volume claim (using default storage class)</li> <li>a pod deployment that uses the declared PVC</li> <li>a service of type LoadBalancer</li> </ul> <p>The pod deployment includes some examples of configuring the server properties via environment variables:</p> <pre><code>env:\n- name: EULA\nvalue: \"TRUE\"\n- name: GAMEMODE\nvalue: survival\n- name: DIFFICULTY\nvalue: normal\n</code></pre> <p>The file is deploy-able as-is on most clusters, but has been confirmed on Docker for Desktop and Google Kubernetes Engine:</p> <pre><code>kubectl apply -f examples/kubernetes.yml\n</code></pre> <p>You can follow the logs of the deployment using:</p> <pre><code>kubectl logs -f deployment/bds\n</code></pre>"},{"location":"bedrock/environment/","title":"Environment Variables","text":""},{"location":"bedrock/environment/#os-options","title":"OS OPTIONS","text":"NAME DESCRIPTION DEFAULT REQUIRED <code>EULA</code> You MUST set this to <code>TRUE</code> to accept the Minecraft End User License Agreement. <code> </code> \u2705 <code>VERSION</code> Can be set to a specific server version or the following special values can be used:         <ul> <li><code>LATEST</code>: The latest (non-preview) version and can be used to auto-upgrade on container start.</li> <li><code>PREVIEW</code>: The latest preview version and will auto-upgrade.</li> <li><code>PREVIOUS</code>: Uses the previously maintained major version. Useful when the mobile app is gradually being upgraded across devices</li> <li><code>1.11</code>: The latest version of 1.11</li> <li><code>1.12</code>: The latest version of 1.12</li> <li><code>1.13</code>: The latest version of 1.13</li> <li><code>1.14</code>: The latest version of 1.14</li> <li><code>1.16</code>: The latest version of 1.16</li> <li>Any specific server version can be provided. If it is a preview version, also set <code>PREVIEW</code> to `true`</li> </ul> <code>LATEST</code> \u2b1c\ufe0f <code>PREVIEW</code> Set to <code>true</code> if the version you are specifying is a PREVIEW version <code>false</code> \u2b1c\ufe0f <code>UID</code> The linux user id to run as derived from <code>/data</code> owner \u2b1c\ufe0f <code>GID</code> The linux group id to run as derived from <code>/data</code> owner \u2b1c\ufe0f <code>PACKAGE_BACKUP_KEEP </code> The number of package backups to keep <code>2</code> \u2b1c\ufe0f"},{"location":"bedrock/environment/#server-properties","title":"SERVER PROPERTIES","text":"NAME DESCRIPTION DEFAULT REQUIRED <code>SERVER_NAME</code> <code></code> \u2b1c\ufe0f <code>SERVER_PORT</code> <code></code> \u2b1c\ufe0f <code>SERVER_PORT_V6</code> <code></code> \u2b1c\ufe0f <code>GAMEMODE</code> <code></code> \u2b1c\ufe0f <code>DIFFICULTY</code> <code></code> \u2b1c\ufe0f <code>LEVEL_TYPE</code> <code></code> \u2b1c\ufe0f <code>ALLOW_CHEATS</code> <code></code> \u2b1c\ufe0f <code>MAX_PLAYERS</code> <code></code> \u2b1c\ufe0f <code>ONLINE_MODE</code> <code></code> \u2b1c\ufe0f <code>ALLOW_LIST</code> If <code>true</code> and map in a allowlist.json that is custom-crafted to the container. <code></code> \u2b1c\ufe0f <code>ALLOW_LIST_USERS</code> A list of player names list users that should be allowed. <code></code> \u2b1c\ufe0f <code>WHITE_LIST</code> If <code>true</code> and map in a whitelist.json that is custom-crafted to the container. <code>false</code> \u2b1c\ufe0f <code>WHITE_LIST_USERS</code> A list of player names list users that should be whitelisted <code></code> \u2b1c\ufe0f <code>OPS</code> A list of XUIDs to grant OPS permissions <code></code> \u2b1c\ufe0f <code>MEMBERS</code> define the members on the server <code></code> \u2b1c\ufe0f <code>VISITORS</code> define the visitors on the server <code></code> \u2b1c\ufe0f <code>VIEW_DISTANCE</code> <code></code> \u2b1c\ufe0f <code>TICK_DISTANCE</code> <code></code> \u2b1c\ufe0f <code>PLAYER_IDLE_TIMEOUT</code> <code></code> \u2b1c\ufe0f <code>MAX_THREADS</code> <code></code> \u2b1c\ufe0f <code>LEVEL_NAME</code> <code></code> \u2b1c\ufe0f <code>LEVEL_SEED</code> <code></code> \u2b1c\ufe0f <code>DEFAULT_PLAYER_PERMISSION_LEVEL</code> <code></code> \u2b1c\ufe0f <code>TEXTUREPACK_REQUIRED</code> <code></code> \u2b1c\ufe0f <code>SERVER_AUTHORITATIVE_MOVEMENT</code> <code></code> \u2b1c\ufe0f <code>PLAYER_MOVEMENT_SCORE_THRESHOLD</code> <code></code> \u2b1c\ufe0f <code>PLAYER_MOVEMENT_DISTANCE_THRESHOLD</code> <code></code> \u2b1c\ufe0f <code>PLAYER_MOVEMENT_DURATION_THRESHOLD_IN_MS</code> <code></code> \u2b1c\ufe0f <code>CORRECT_PLAYER_MOVEMENT</code> <code></code> \u2b1c\ufe0f"},{"location":"bedrock/examples/","title":"Examples","text":"<p>To configure a flat, creative server instead of the default</p> <pre><code>docker run -d -it --name bds-flat-creative \\\n  -e EULA=TRUE -e LEVEL_TYPE=flat -e GAMEMODE=creative \\\n  -p 19132:19132/udp itzg/minecraft-bedrock-server\n</code></pre>"},{"location":"bedrock/examples/#executing-server-commands","title":"Executing server commands","text":"<p>This image comes bundled with a script called <code>send-command</code> that will send a Bedrock command and argument to the Bedrock server console. The output of the command only be visible in the container logs.</p> <p>For example:</p> <pre><code>docker exec CONTAINER_NAME_OR_ID send-command gamerule dofiretick false\n</code></pre> <p>Alternatively, with stdin and tty enabled (such as using <code>-it</code>), attach to the container's console by its name or ID using:</p> <p><code>shell script docker attach CONTAINER_NAME_OR_ID <pre><code>While attached, you can execute any server-side commands, such as op'ing your player to be admin:\n</code></pre> gamerule dofiretick false</code></p> <p>When finished, detach from the server console using Ctrl-p, Ctrl-q</p>"},{"location":"bedrock/mods/","title":"Mods Addons","text":"<p>Also known as behavior or resource packs, in order to add mods into your server you can follow these steps, tested with OPS (One Player Sleep) and bedrocktweaks</p> <ol> <li>Install the mcpack or mcaddon on the client side first, just to make it easier to copy the files to the server, for Windows 10 files should be located on <code>C:\\Users\\USER\\AppData\\Local\\Packages\\Microsoft.MinecraftUWP_*\\LocalState\\games\\com.mojang</code>.</li> <li>Copy over the folders of the mods from either behavior_packs or resource_packs into the server's volume. <p>If you want to install them without using a client you should be able to unzip the mods directly into the server's volume, .mcaddon should go into behavior_packs and .mcpack into resource_packs. Both .mcaddon and .mcpack are actually renamed .zip files.</p> </li> <li>On the server's volume we will need to edit <code>valid_known_packs.json</code>, you can just copy and paste the definition of another pack and replace path, uuid and version with the mod being installed, uuid and version can be found on the mod behavior or resource _packs/mod/manifest.json, path is the path to the mod's folder. <pre><code>    {\n        \"file_system\" : \"RawPath\",\n        \"path\" : \"behavior_packs/Foxy'sOneP\",\n        \"uuid\" : \"5f51f7b7-85dc-44da-a3ef-a48d8414e4d5\",\n        \"version\" : \"3.0.0\"\n    }\n</code></pre></li> <li>Lastly create on the server's volume <code>worlds/$level-name/world_behavior_packs.json</code>, you'll need to add an entry for each mod like on the previous manifest.json, we only need the uuid now called pack_id and the version replacing dots with commas and double quotes with [ ]. <p>You can also create a <code>worlds/$level-name/world_resource_packs.json</code> but I have seen that putting both resource and behavior packs inside the same json works just fine <pre><code>[\n    {\n        \"pack_id\" : \"5f51f7b7-85dc-44da-a3ef-a48d8414e4d5\",\n        \"version\" : [ 3, 0, 0 ]\n    }\n]\n</code></pre></p> </li> <li>Restart the server and the mods should be enabled now! when connecting you will get a prompt asking if you want to \"Download &amp; Join\" or just \"Join\", You need to Download &amp; Join if you want to actually see the new resource pack added to the server. This prompt is exclusive to resource packs as these alter how minecraft looks while behavior packs alter how minecraft functions and don't need to be downloaded or installed on the client side. <p>If you want to force the resource pack on all clients, there's an option <code>texturepack-required=false</code> in <code>server.properties</code> that should be changed to <code>true</code>. Resource packs can be deleted by going into Settings &gt; Storage &gt; Cached Data, then selecting the pack and clicking on the trash can.</p> </li> </ol> <p>For more information FoxyNoTail did a video explaining the same on a server running on Windows.</p>"},{"location":"bedrock/mods/#more-information","title":"More information","text":"<p>For more information about managing Bedrock Dedicated Servers in general, check out this Reddit post.</p>"},{"location":"contributing/building/","title":"Building","text":"<p>Ensure buildx/BuildKit support is enabled and run:</p> <pre><code>docker buildx build --platform=linux/arm64 --platform=linux/arm/v7 --platform=linux/amd64 --tag itzg/minecraft-server:multiarch --push .\n</code></pre> <p>To build for local testing, use:</p> <pre><code>docker buildx build --platform=linux/amd64 --tag mc-multiarch --load .\n</code></pre>"},{"location":"contributing/development/","title":"Development","text":""},{"location":"contributing/development/#adding-a-server-type","title":"Adding a server type","text":"<p>Adding a new server <code>TYPE</code> can vary due to the complexity of obtaining and configuring each type; however, the addition of any server type includes at least the following steps:</p> <ol> <li>Copy an existing \"start-deploy*\" script, such as start-deployMohist and rename it accordingly making sure to retain the \"start-deploy\" prefix</li> <li>Modify the type-specific behavior between the \"start-utils\" preamble and the hand-off to <code>start-setupWorld</code> at the end of the script </li> <li>Develop and test the changes using the iterative process described below</li> <li>Add a case-entry to the <code>case \"${TYPE^^}\"</code> in start-configuration</li> <li>Update documentation in the itzg/docker-minecraft-docs repo. It is recommended to copy-modify an existing section of <code>docs/java/server-types/index.md</code> to retain a similar wording and level of detail.</li> <li>Submit a pull request</li> <li>Submit a pull request for documentation changes</li> </ol>"},{"location":"contributing/development/#iterative-script-development","title":"Iterative script development","text":"<p>Individual scripts can be iteratively developed, debugged, and tested using the following procedure.</p> <p>First, build a baseline of the image to include the packages needed by existing or new scripts:</p> <p>PowerShell: (Example of building and testing ForgeAPI)</p> <pre><code>$env:MODS_FORGEAPI_KEY='$2a$...'\n$env:FOLDER_TO_TEST=\"forgeapimods_projectids\"\n$env:IMAGE_TO_TEST=\"mc-dev\"\ndocker build -t $env:IMAGE_TO_TEST .\npushd \"tests/setuponlytests/$env:FOLDER_TO_TEST/\"\ndocker-compose run mc\ndocker-compose down -v --remove-orphans\npopd\n</code></pre> <p>PowerShell: Building different images of Java for testing</p> <pre><code>$env:BASE_IMAGE='eclipse-temurin:8u312-b07-jre'\n$env:IMAGE_TO_TEST=\"mc-dev\"\ndocker build --build-arg BASE_IMAGE=$env:BASE_IMAGE -t $env:IMAGE_TO_TEST .\n</code></pre> <p>Bash: (Example of building and testing ForgeAPI)</p> <pre><code>export MODS_FORGEAPI_KEY='$2a$...'\nexport FOLDER_TO_TEST=\"forgeapimods_file\"\nexport IMAGE_TO_TEST=\"mc-dev\"\ndocker build -t $IMAGE_TO_TEST .\npushd tests/setuponlytests/$FOLDER_TO_TEST/\ndocker-compose run mc\ndocker-compose down -v --remove-orphans\npopd\n</code></pre> <p>Using the baseline image, an interactive container can be started to iteratively run the scripts to be developed. By attaching the current workspace directory, you can use the local editor of your choice to iteratively modify scripts while using the container to run them.</p> <p>```shell script docker run -it --rm -v ${PWD}:/scripts -e SCRIPTS=/scripts/ --entrypoint bash mc-dev <pre><code>From within the container you can run individual scripts via the attached `/scripts/` path; however, be sure to set any environment variables expected by the scripts by either `export`ing them manually:\n\n``` shell\nexport VANILLA_VERSION=1.12.2\n/scripts/start-magma\n</code></pre></p> <p>...or pre-pending script execution:</p> <pre><code>VANILLA_VERSION=1.12.2 /scripts/start-magma\n</code></pre> <p>Note</p> <p>You may want to temporarily add an <code>exit</code> statement near the end of your script to isolate execution to just the script you're developing.</p>"},{"location":"contributing/development/#using-development-copy-of-mc-image-helper","title":"Using development copy of mc-image-helper","text":"<p>In the cloned copy of <code>mc-image-helper</code>, create an up-to-date snapshot build of the tgz distribution using:</p> <pre><code>./gradlew distTar\n</code></pre> <p>Assuming http-server is installed globally, start a static web server using:</p> <pre><code>http-server ./build/distributions -p 8080\n</code></pre> <p>Note the port that was selected by http-server and pass the build arguments, such as:</p> <pre><code>--build-arg MC_HELPER_VERSION=1.8.1-SNAPSHOT \\\n--build-arg MC_HELPER_BASE_URL=http://host.docker.internal:8080\n</code></pre> <p>Now the image can be built like normal, and it will install mc-image-helper from the locally built copy.</p>"},{"location":"contributing/development/#generating-release-notes","title":"Generating release notes","text":"<p>The following git command can be used to provide the bulk of release notes content:</p> <pre><code>git log --invert-grep --grep \"^ci:\" --grep \"^misc:\" --grep \"^docs:\" --pretty=\"* %s\" 1.1.0..1.2.0\n</code></pre>"}]}